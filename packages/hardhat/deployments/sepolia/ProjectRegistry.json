{
  "address": "0x78Ca926C91c0A747ffA896989D1628ADfE5A7810",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectID",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaPtr",
          "name": "metaPtr",
          "type": "tuple"
        }
      ],
      "name": "MetadataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ProjectCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "addProjectOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "internalType": "struct MetaPtr",
          "name": "metadata",
          "type": "tuple"
        }
      ],
      "name": "createProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectID",
          "type": "uint256"
        }
      ],
      "name": "getProjectOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectID",
          "type": "uint256"
        }
      ],
      "name": "projectOwnersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "internalType": "struct MetaPtr",
          "name": "metadata",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectsOwners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeProjectOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectID",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "internalType": "struct MetaPtr",
          "name": "metadata",
          "type": "tuple"
        }
      ],
      "name": "updateProjectMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c4f494a7e4c50dd96b4f33b852174e8644f3746f957541714156050184003b1",
  "receipt": {
    "to": null,
    "from": "0x0b130fd03fA70571BB05197422B8e153CAc6bC65",
    "contractAddress": "0x78Ca926C91c0A747ffA896989D1628ADfE5A7810",
    "transactionIndex": 63,
    "gasUsed": "818037",
    "logsBloom": "0x
    "blockHash": "0x301b4d3c2eecd1f7b7a90b5462ae29347a9e11297bb09dbc3cbcd9cc7f593dbc",
    "transactionHash": "0x6c4f494a7e4c50dd96b4f33b852174e8644f3746f957541714156050184003b1",
    "logs": [],
    "blockNumber": 6130056,
    "cumulativeGasUsed": "9646500",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0a45bcfb9a2c97969d806a1cee0214fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct MetaPtr\",\"name\":\"metaPtr\",\"type\":\"tuple\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addProjectOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct MetaPtr\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectID\",\"type\":\"uint256\"}],\"name\":\"getProjectOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectID\",\"type\":\"uint256\"}],\"name\":\"projectOwnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct MetaPtr\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectsOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeProjectOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct MetaPtr\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"updateProjectMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addProjectOwner(uint256,address)\":{\"params\":{\"newOwner\":\"address of new project owner\",\"projectID\":\"ID of previously created project\"}},\"createProject((uint256,string))\":{\"params\":{\"metadata\":\"the metadata pointer\"}},\"getProjectOwners(uint256)\":{\"params\":{\"projectID\":\"ID of project \"},\"returns\":{\"_0\":\"List of current owners of given project\"}},\"initialize()\":{\"details\":\"In future deploys of the implementation, a higher version should be passed to reinitializer\"},\"projectOwnersCount(uint256)\":{\"params\":{\"projectID\":\"ID of project \"},\"returns\":{\"_0\":\"Count of owners for given project\"}},\"removeProjectOwner(uint256,address,address)\":{\"params\":{\"owner\":\"Address of new Owner\",\"prevOwner\":\"Address of previous owner in OwnerList\",\"projectID\":\"ID of previously created project\"}},\"updateProjectMetadata(uint256,(uint256,string))\":{\"params\":{\"metadata\":\"Updated pointer to external metadata\",\"projectID\":\"ID of previously created project\"}}},\"title\":\"ProjectRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addProjectOwner(uint256,address)\":{\"notice\":\"Associate a new owner with a project\"},\"createProject((uint256,string))\":{\"notice\":\"Creates a new project with a metadata pointer\"},\"getProjectOwners(uint256)\":{\"notice\":\"Retrieve list of project owners \"},\"initialize()\":{\"notice\":\"Initializes the contract after an upgrade\"},\"projectOwnersCount(uint256)\":{\"notice\":\"Retrieve count of existing project owners\"},\"removeProjectOwner(uint256,address,address)\":{\"notice\":\"Disassociate an existing owner from a project\"},\"updateProjectMetadata(uint256,(uint256,string))\":{\"notice\":\"Updates Metadata for single project\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/projectRegistry/ProjectRegistry.sol\":\"ProjectRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/projectRegistry/ProjectRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/MetaPtr.sol\\\";\\n\\n/**\\n * @title ProjectRegistry\\n */\\ncontract ProjectRegistry is Initializable {\\n    // Types\\n\\n    // The project structs contain the minimal data we need for a project\\n    struct Project {\\n        uint256 id;\\n        MetaPtr metadata;\\n    }\\n\\n    // A linked list of owners of a project\\n    // The use of a linked list allows us to easily add and remove owners,\\n    // access them directly in O(1), and loop through them.\\n    //\\n    // {\\n    //     count: 3,\\n    //     list: {\\n    //         OWNERS_LIST_SENTINEL => owner1Address,\\n    //         owner1Address => owner2Address,\\n    //         owner2Address => owner3Address,\\n    //         owner3Address => OWNERS_LIST_SENTINEL\\n    //     }\\n    // }\\n    struct OwnerList {\\n        uint256 count;\\n        mapping(address => address) list;\\n    }\\n\\n    // State variables\\n\\n    // Used as sentinel value in the owners linked list.\\n    address constant OWNERS_LIST_SENTINEL = address(0x1);\\n\\n    // The number of projects created, used to give an incremental id to each one\\n    uint256 public projectsCount;\\n\\n    // The mapping of projects, from projectID to Project\\n    mapping(uint256 => Project) public projects;\\n\\n    // The mapping projects owners, from projectID to OwnerList\\n    mapping(uint256 => OwnerList) public projectsOwners;\\n\\n    // Events\\n\\n    event ProjectCreated(uint256 indexed projectID, address indexed owner);\\n    event MetadataUpdated(uint256 indexed projectID, MetaPtr metaPtr);\\n    event OwnerAdded(uint256 indexed projectID, address indexed owner);\\n    event OwnerRemoved(uint256 indexed projectID, address indexed owner);\\n\\n    // Modifiers\\n\\n    modifier onlyProjectOwner(uint256 projectID) {\\n        require(projectsOwners[projectID].list[msg.sender] != address(0), \\\"PR000\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract after an upgrade\\n     * @dev In future deploys of the implementation, a higher version should be passed to reinitializer\\n     */\\n    function initialize() public reinitializer(1) {\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Creates a new project with a metadata pointer\\n     * @param metadata the metadata pointer\\n     */\\n    function createProject(MetaPtr calldata metadata) external {\\n        uint256 projectID = projectsCount++;\\n\\n        Project storage project = projects[projectID];\\n        project.id = projectID;\\n        project.metadata = metadata;\\n\\n        initProjectOwners(projectID);\\n\\n        emit ProjectCreated(projectID, msg.sender);\\n        emit MetadataUpdated(projectID, metadata);\\n    }\\n\\n    /**\\n     * @notice Updates Metadata for single project\\n     * @param projectID ID of previously created project\\n     * @param metadata Updated pointer to external metadata\\n     */\\n    function updateProjectMetadata(uint256 projectID, MetaPtr calldata metadata) external onlyProjectOwner(projectID) {\\n        projects[projectID].metadata = metadata;\\n        emit MetadataUpdated(projectID, metadata);\\n    }\\n\\n    /**\\n     * @notice Associate a new owner with a project\\n     * @param projectID ID of previously created project\\n     * @param newOwner address of new project owner\\n     */\\n    function addProjectOwner(uint256 projectID, address newOwner) external onlyProjectOwner(projectID) {\\n        require(newOwner != address(0) && newOwner != OWNERS_LIST_SENTINEL && newOwner != address(this), \\\"PR001\\\");\\n\\n        OwnerList storage owners = projectsOwners[projectID];\\n\\n        require(owners.list[newOwner] == address(0), \\\"PR002\\\");\\n\\n        owners.list[newOwner] = owners.list[OWNERS_LIST_SENTINEL];\\n        owners.list[OWNERS_LIST_SENTINEL] = newOwner;\\n        owners.count++;\\n\\n        emit OwnerAdded(projectID, newOwner);\\n    }\\n\\n    /**\\n     * @notice Disassociate an existing owner from a project\\n     * @param projectID ID of previously created project\\n     * @param prevOwner Address of previous owner in OwnerList\\n     * @param owner Address of new Owner\\n     */\\n    function removeProjectOwner(uint256 projectID, address prevOwner, address owner) external onlyProjectOwner(projectID) {\\n        require(owner != address(0) && owner != OWNERS_LIST_SENTINEL, \\\"PR001\\\");\\n\\n        OwnerList storage owners = projectsOwners[projectID];\\n\\n        require(owners.list[prevOwner] == owner, \\\"PR003\\\");\\n        require(owners.count > 1, \\\"PR004\\\");\\n\\n        owners.list[prevOwner] = owners.list[owner];\\n        delete owners.list[owner];\\n        owners.count--;\\n\\n        emit OwnerRemoved(projectID, owner);\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @notice Retrieve count of existing project owners\\n     * @param projectID ID of project \\n     * @return Count of owners for given project\\n     */\\n    function projectOwnersCount(uint256 projectID) external view returns(uint256) {\\n        return projectsOwners[projectID].count;\\n    }\\n\\n    /**\\n     * @notice Retrieve list of project owners \\n     * @param projectID ID of project \\n     * @return List of current owners of given project\\n     */\\n    function getProjectOwners(uint256 projectID) external view returns(address[] memory) {\\n        OwnerList storage owners = projectsOwners[projectID];\\n\\n        address[] memory list = new address[](owners.count);\\n\\n        uint256 index = 0;\\n        address current = owners.list[OWNERS_LIST_SENTINEL];\\n\\n        if (current == address(0x0)) {\\n            return list;\\n        }\\n\\n        while (current != OWNERS_LIST_SENTINEL) {\\n            list[index] = current;\\n            current = owners.list[current];\\n            index++;\\n        }\\n\\n        return list;\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @notice Create initial OwnerList for passed project\\n     * @param projectID ID of project\\n     */\\n    function initProjectOwners(uint256 projectID) internal {\\n        OwnerList storage owners = projectsOwners[projectID];\\n\\n        owners.list[OWNERS_LIST_SENTINEL] = msg.sender;\\n        owners.list[msg.sender] = OWNERS_LIST_SENTINEL;\\n        owners.count = 1;\\n    }\\n\\n    // Private functions\\n    // ...\\n}\\n\",\"keccak256\":\"0xfa7edb5ce3ca0c83e019632a517c55ff20d1acb7b5000ca84d0dfc34dace7fc7\",\"license\":\"AGPL-3.0-only\"},\"contracts/utils/MetaPtr.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nstruct MetaPtr {\\n\\n  /// @notice Protocol ID corresponding to a specific protocol.\\n  /// More info at https://github.com/allo-protocol/contracts/tree/main/docs/MetaPtrProtocol.md\\n  uint256 protocol;\\n  \\n  /// @notice Pointer to fetch metadata for the specified protocol\\n  string pointer;\\n}\",\"keccak256\":\"0x88f52d7fcbf4311237adc7af2e11f7343d586b6338d2ac91a6975bd7ec089323\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610dd5806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063834a973611610066578063834a97361461012b578063c172dc231461013e578063c73b302e1461015e578063e63f592c14610167578063fd5423a81461018757600080fd5b8063107046bd146100a35780632d9fcf03146100cd5780633044ef7f146100e257806378892204146100f55780638129fc1c14610123575b600080fd5b6100b66100b1366004610920565b61019a565b6040516100c4929190610939565b60405180910390f35b6100e06100db3660046109be565b610264565b005b6100e06100f0366004610a12565b610439565b610115610103366004610920565b60009081526003602052604090205490565b6040519081526020016100c4565b6100e061051e565b6100e0610139366004610a4f565b6105f5565b61011561014c366004610920565b60036020526000908152604090205481565b61011560015481565b61017a610175366004610920565b610689565b6040516100c49190610a96565b6100e0610195366004610ae3565b61077d565b600260205280600052604060002060009150905080600001549080600101604051806040016040529081600082015481526020016001820180546101dd90610b0f565b80601f016020809104026020016040519081016040528092919081815260200182805461020990610b0f565b80156102565780601f1061022b57610100808354040283529160200191610256565b820191906000526020600020905b81548152906001019060200180831161023957829003601f168201915b505050505081525050905082565b600083815260036020908152604080832033845260010190915290205483906001600160a01b03166102b15760405162461bcd60e51b81526004016102a890610b43565b60405180910390fd5b6001600160a01b038216158015906102d357506001600160a01b038216600114155b6103075760405162461bcd60e51b8152602060048201526005602482015264505230303160d81b60448201526064016102a8565b60008481526003602090815260408083206001600160a01b038781168552600182019093529220548116908416146103695760405162461bcd60e51b8152602060048201526005602482015264505230303360d81b60448201526064016102a8565b80546001106103a25760405162461bcd60e51b815260206004820152600560248201526414148c0c0d60da1b60448201526064016102a8565b6001600160a01b038381166000818152600184016020526040808220805489861684529183208054929095166001600160a01b031992831617909455918152825490911690915581549082906103f783610b78565b90915550506040516001600160a01b0384169086907f2d2f043cb8f93c6464e5ce5b93e72c2863eeb044241ea316d2a5a9af9320712190600090a35050505050565b600180546000918261044a83610b8f565b90915550600081815260026020526040902081815590915082600182016104718282610c0d565b5050600082815260036020908152604080832060018085528082019093528184208054336001600160a01b0319918216811790925581865283862080549091168517905592905551909184917f63c92f9505d420bff631cb9df33be952bdc11e2118da36a850b43e6bcc4ce4de9190a3817ff92c2639c25d6a22c38e6d6b293f74a9b22491273b1dbb67fc1255222696be5b846040516105119190610d06565b60405180910390a2505050565b600054600190610100900460ff16158015610540575060005460ff8083169116105b6105a35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102a8565b6000805461ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600082815260036020908152604080832033845260010190915290205482906001600160a01b03166106395760405162461bcd60e51b81526004016102a890610b43565b600083815260026020526040902082906001016106568282610c0d565b905050827ff92c2639c25d6a22c38e6d6b293f74a9b22491273b1dbb67fc1255222696be5b836040516105119190610d06565b600081815260036020526040812080546060929067ffffffffffffffff8111156106b5576106b5610ba8565b6040519080825280602002602001820160405280156106de578160200160208202803683370190505b50600160008181529084016020526040812054919250906001600160a01b03168061070d575090949350505050565b6001600160a01b038116600114610773578083838151811061073157610731610d89565b6001600160a01b03928316602091820292909201810191909152918116600090815260018601909252604090912054168161076b81610b8f565b92505061070d565b5090949350505050565b600082815260036020908152604080832033845260010190915290205482906001600160a01b03166107c15760405162461bcd60e51b81526004016102a890610b43565b6001600160a01b038216158015906107e357506001600160a01b038216600114155b80156107f857506001600160a01b0382163014155b61082c5760405162461bcd60e51b8152602060048201526005602482015264505230303160d81b60448201526064016102a8565b60008381526003602090815260408083206001600160a01b03868116855260018201909352922054161561088a5760405162461bcd60e51b8152602060048201526005602482015264282918181960d91b60448201526064016102a8565b60016000818152828201602052604080822080546001600160a01b038881168086529385208054919092166001600160a01b03199182161790915593835280549093161790915581549082906108df83610b8f565b90915550506040516001600160a01b0384169085907fab7a51f59a55e3b65bbabf99457f8955ff12366d20e368988c35d2eab9bd8df990600090a350505050565b60006020828403121561093257600080fd5b5035919050565b82815260006020604081840152835160408401528084015160406060850152805180608086015260005b8181101561097f5782810184015186820160a001528301610963565b50600060a0828701015260a0601f19601f83011686010193505050509392505050565b80356001600160a01b03811681146109b957600080fd5b919050565b6000806000606084860312156109d357600080fd5b833592506109e3602085016109a2565b91506109f1604085016109a2565b90509250925092565b600060408284031215610a0c57600080fd5b50919050565b600060208284031215610a2457600080fd5b813567ffffffffffffffff811115610a3b57600080fd5b610a47848285016109fa565b949350505050565b60008060408385031215610a6257600080fd5b82359150602083013567ffffffffffffffff811115610a8057600080fd5b610a8c858286016109fa565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610ad75783516001600160a01b031683529284019291840191600101610ab2565b50909695505050505050565b60008060408385031215610af657600080fd5b82359150610b06602084016109a2565b90509250929050565b600181811c90821680610b2357607f821691505b602082108103610a0c57634e487b7160e01b600052602260045260246000fd5b602080825260059082015264050523030360dc1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081610b8757610b87610b62565b506000190190565b600060018201610ba157610ba1610b62565b5060010190565b634e487b7160e01b600052604160045260246000fd5b601f821115610c0857600081815260208120601f850160051c81016020861015610be55750805b601f850160051c820191505b81811015610c0457828155600101610bf1565b5050505b505050565b813581556001808201602080850135601e19863603018112610c2e57600080fd5b8501803567ffffffffffffffff811115610c4757600080fd5b8036038383011315610c5857600080fd5b610c6c81610c668654610b0f565b86610bbe565b6000601f821160018114610ca25760008315610c8a57508382018501355b600019600385901b1c1916600184901b178655610cfb565b600086815260209020601f19841690835b82811015610cd257868501880135825593870193908901908701610cb3565b5084821015610cf15760001960f88660031b161c198785880101351681555b50508683881b0186555b505050505050505050565b602081528135602082015260006020830135601e19843603018112610d2a57600080fd5b830160208101903567ffffffffffffffff811115610d4757600080fd5b803603821315610d5657600080fd5b604080850152806060850152808260808601376000608082860101526080601f19601f8301168501019250505092915050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122090450a3fcd0dd8a4c1ec2db984db3001ce784b7ae0a82a40e972024466289a5664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063834a973611610066578063834a97361461012b578063c172dc231461013e578063c73b302e1461015e578063e63f592c14610167578063fd5423a81461018757600080fd5b8063107046bd146100a35780632d9fcf03146100cd5780633044ef7f146100e257806378892204146100f55780638129fc1c14610123575b600080fd5b6100b66100b1366004610920565b61019a565b6040516100c4929190610939565b60405180910390f35b6100e06100db3660046109be565b610264565b005b6100e06100f0366004610a12565b610439565b610115610103366004610920565b60009081526003602052604090205490565b6040519081526020016100c4565b6100e061051e565b6100e0610139366004610a4f565b6105f5565b61011561014c366004610920565b60036020526000908152604090205481565b61011560015481565b61017a610175366004610920565b610689565b6040516100c49190610a96565b6100e0610195366004610ae3565b61077d565b600260205280600052604060002060009150905080600001549080600101604051806040016040529081600082015481526020016001820180546101dd90610b0f565b80601f016020809104026020016040519081016040528092919081815260200182805461020990610b0f565b80156102565780601f1061022b57610100808354040283529160200191610256565b820191906000526020600020905b81548152906001019060200180831161023957829003601f168201915b505050505081525050905082565b600083815260036020908152604080832033845260010190915290205483906001600160a01b03166102b15760405162461bcd60e51b81526004016102a890610b43565b60405180910390fd5b6001600160a01b038216158015906102d357506001600160a01b038216600114155b6103075760405162461bcd60e51b8152602060048201526005602482015264505230303160d81b60448201526064016102a8565b60008481526003602090815260408083206001600160a01b038781168552600182019093529220548116908416146103695760405162461bcd60e51b8152602060048201526005602482015264505230303360d81b60448201526064016102a8565b80546001106103a25760405162461bcd60e51b815260206004820152600560248201526414148c0c0d60da1b60448201526064016102a8565b6001600160a01b038381166000818152600184016020526040808220805489861684529183208054929095166001600160a01b031992831617909455918152825490911690915581549082906103f783610b78565b90915550506040516001600160a01b0384169086907f2d2f043cb8f93c6464e5ce5b93e72c2863eeb044241ea316d2a5a9af9320712190600090a35050505050565b600180546000918261044a83610b8f565b90915550600081815260026020526040902081815590915082600182016104718282610c0d565b5050600082815260036020908152604080832060018085528082019093528184208054336001600160a01b0319918216811790925581865283862080549091168517905592905551909184917f63c92f9505d420bff631cb9df33be952bdc11e2118da36a850b43e6bcc4ce4de9190a3817ff92c2639c25d6a22c38e6d6b293f74a9b22491273b1dbb67fc1255222696be5b846040516105119190610d06565b60405180910390a2505050565b600054600190610100900460ff16158015610540575060005460ff8083169116105b6105a35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102a8565b6000805461ffff191660ff83169081176101001761ff0019169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600082815260036020908152604080832033845260010190915290205482906001600160a01b03166106395760405162461bcd60e51b81526004016102a890610b43565b600083815260026020526040902082906001016106568282610c0d565b905050827ff92c2639c25d6a22c38e6d6b293f74a9b22491273b1dbb67fc1255222696be5b836040516105119190610d06565b600081815260036020526040812080546060929067ffffffffffffffff8111156106b5576106b5610ba8565b6040519080825280602002602001820160405280156106de578160200160208202803683370190505b50600160008181529084016020526040812054919250906001600160a01b03168061070d575090949350505050565b6001600160a01b038116600114610773578083838151811061073157610731610d89565b6001600160a01b03928316602091820292909201810191909152918116600090815260018601909252604090912054168161076b81610b8f565b92505061070d565b5090949350505050565b600082815260036020908152604080832033845260010190915290205482906001600160a01b03166107c15760405162461bcd60e51b81526004016102a890610b43565b6001600160a01b038216158015906107e357506001600160a01b038216600114155b80156107f857506001600160a01b0382163014155b61082c5760405162461bcd60e51b8152602060048201526005602482015264505230303160d81b60448201526064016102a8565b60008381526003602090815260408083206001600160a01b03868116855260018201909352922054161561088a5760405162461bcd60e51b8152602060048201526005602482015264282918181960d91b60448201526064016102a8565b60016000818152828201602052604080822080546001600160a01b038881168086529385208054919092166001600160a01b03199182161790915593835280549093161790915581549082906108df83610b8f565b90915550506040516001600160a01b0384169085907fab7a51f59a55e3b65bbabf99457f8955ff12366d20e368988c35d2eab9bd8df990600090a350505050565b60006020828403121561093257600080fd5b5035919050565b82815260006020604081840152835160408401528084015160406060850152805180608086015260005b8181101561097f5782810184015186820160a001528301610963565b50600060a0828701015260a0601f19601f83011686010193505050509392505050565b80356001600160a01b03811681146109b957600080fd5b919050565b6000806000606084860312156109d357600080fd5b833592506109e3602085016109a2565b91506109f1604085016109a2565b90509250925092565b600060408284031215610a0c57600080fd5b50919050565b600060208284031215610a2457600080fd5b813567ffffffffffffffff811115610a3b57600080fd5b610a47848285016109fa565b949350505050565b60008060408385031215610a6257600080fd5b82359150602083013567ffffffffffffffff811115610a8057600080fd5b610a8c858286016109fa565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610ad75783516001600160a01b031683529284019291840191600101610ab2565b50909695505050505050565b60008060408385031215610af657600080fd5b82359150610b06602084016109a2565b90509250929050565b600181811c90821680610b2357607f821691505b602082108103610a0c57634e487b7160e01b600052602260045260246000fd5b602080825260059082015264050523030360dc1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081610b8757610b87610b62565b506000190190565b600060018201610ba157610ba1610b62565b5060010190565b634e487b7160e01b600052604160045260246000fd5b601f821115610c0857600081815260208120601f850160051c81016020861015610be55750805b601f850160051c820191505b81811015610c0457828155600101610bf1565b5050505b505050565b813581556001808201602080850135601e19863603018112610c2e57600080fd5b8501803567ffffffffffffffff811115610c4757600080fd5b8036038383011315610c5857600080fd5b610c6c81610c668654610b0f565b86610bbe565b6000601f821160018114610ca25760008315610c8a57508382018501355b600019600385901b1c1916600184901b178655610cfb565b600086815260209020601f19841690835b82811015610cd257868501880135825593870193908901908701610cb3565b5084821015610cf15760001960f88660031b161c198785880101351681555b50508683881b0186555b505050505050505050565b602081528135602082015260006020830135601e19843603018112610d2a57600080fd5b830160208101903567ffffffffffffffff811115610d4757600080fd5b803603821315610d5657600080fd5b604080850152806060850152808260808601376000608082860101526080601f19601f8301168501019250505092915050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122090450a3fcd0dd8a4c1ec2db984db3001ce784b7ae0a82a40e972024466289a5664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addProjectOwner(uint256,address)": {
        "params": {
          "newOwner": "address of new project owner",
          "projectID": "ID of previously created project"
        }
      },
      "createProject((uint256,string))": {
        "params": {
          "metadata": "the metadata pointer"
        }
      },
      "getProjectOwners(uint256)": {
        "params": {
          "projectID": "ID of project "
        },
        "returns": {
          "_0": "List of current owners of given project"
        }
      },
      "initialize()": {
        "details": "In future deploys of the implementation, a higher version should be passed to reinitializer"
      },
      "projectOwnersCount(uint256)": {
        "params": {
          "projectID": "ID of project "
        },
        "returns": {
          "_0": "Count of owners for given project"
        }
      },
      "removeProjectOwner(uint256,address,address)": {
        "params": {
          "owner": "Address of new Owner",
          "prevOwner": "Address of previous owner in OwnerList",
          "projectID": "ID of previously created project"
        }
      },
      "updateProjectMetadata(uint256,(uint256,string))": {
        "params": {
          "metadata": "Updated pointer to external metadata",
          "projectID": "ID of previously created project"
        }
      }
    },
    "title": "ProjectRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addProjectOwner(uint256,address)": {
        "notice": "Associate a new owner with a project"
      },
      "createProject((uint256,string))": {
        "notice": "Creates a new project with a metadata pointer"
      },
      "getProjectOwners(uint256)": {
        "notice": "Retrieve list of project owners "
      },
      "initialize()": {
        "notice": "Initializes the contract after an upgrade"
      },
      "projectOwnersCount(uint256)": {
        "notice": "Retrieve count of existing project owners"
      },
      "removeProjectOwner(uint256,address,address)": {
        "notice": "Disassociate an existing owner from a project"
      },
      "updateProjectMetadata(uint256,(uint256,string))": {
        "notice": "Updates Metadata for single project"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 800,
        "contract": "contracts/projectRegistry/ProjectRegistry.sol:ProjectRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 803,
        "contract": "contracts/projectRegistry/ProjectRegistry.sol:ProjectRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8062,
        "contract": "contracts/projectRegistry/ProjectRegistry.sol:ProjectRegistry",
        "label": "projectsCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8067,
        "contract": "contracts/projectRegistry/ProjectRegistry.sol:ProjectRegistry",
        "label": "projects",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Project)8047_storage)"
      },
      {
        "astId": 8072,
        "contract": "contracts/projectRegistry/ProjectRegistry.sol:ProjectRegistry",
        "label": "projectsOwners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(OwnerList)8054_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(OwnerList)8054_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProjectRegistry.OwnerList)",
        "numberOfBytes": "32",
        "value": "t_struct(OwnerList)8054_storage"
      },
      "t_mapping(t_uint256,t_struct(Project)8047_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProjectRegistry.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)8047_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MetaPtr)10071_storage": {
        "encoding": "inplace",
        "label": "struct MetaPtr",
        "members": [
          {
            "astId": 10067,
            "contract": "contracts/projectRegistry/ProjectRegistry.sol:ProjectRegistry",
            "label": "protocol",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10070,
            "contract": "contracts/projectRegistry/ProjectRegistry.sol:ProjectRegistry",
            "label": "pointer",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OwnerList)8054_storage": {
        "encoding": "inplace",
        "label": "struct ProjectRegistry.OwnerList",
        "members": [
          {
            "astId": 8049,
            "contract": "contracts/projectRegistry/ProjectRegistry.sol:ProjectRegistry",
            "label": "count",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8053,
            "contract": "contracts/projectRegistry/ProjectRegistry.sol:ProjectRegistry",
            "label": "list",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_address)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Project)8047_storage": {
        "encoding": "inplace",
        "label": "struct ProjectRegistry.Project",
        "members": [
          {
            "astId": 8043,
            "contract": "contracts/projectRegistry/ProjectRegistry.sol:ProjectRegistry",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8046,
            "contract": "contracts/projectRegistry/ProjectRegistry.sol:ProjectRegistry",
            "label": "metadata",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(MetaPtr)10071_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}